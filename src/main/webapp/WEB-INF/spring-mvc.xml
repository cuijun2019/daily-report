<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

    <!-- 自动扫描且只扫描@Controller -->
    <context:component-scan base-package="com.etone.project.**.web,com.etone.project.modules.**.web" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <context:property-placeholder ignore-resource-not-found="true" location="classpath*:/application.properties"/>

    <!-- 初始化SpringContext工具类 -->
    <bean id="springContext " class="com.etone.project.base.support.SpringContext" scope="singleton"/>

    <!-- AOP 异步日志 BEGIN -->
    <!-- 利用Spring实现初始化LogMessage时注入placeholder中的某些属性, 结合@Value注解 -->
    <bean id="logMessage" class="com.etone.project.base.support.log.LogMessage" scope="prototype">
        <property name="systemCode" value="${system.code}"/>
        <property name="system" value="${system.name}"/>
    </bean>
    <!-- 系统日志跟踪功能 -->
    <bean id="log4Database" class="com.etone.project.base.support.log.Log4Database">
        <property name="systemLogManager" ref="systemLogManager"/>
        <property name="operateLogManager" ref="operateLogManager"/>
        <property name="rootLevel" value="ERROR"/>
        <property name="moduleLevel">
            <map>
                <entry key="com.etone.project.base" value="TRACE"/>
                <entry key="com.etone.project.modules" value="INFO"/>
            </map>
        </property>
    </bean>

    <bean id="logManager" class="com.etone.project.modules.lte.manager.impl.LteLogManager"></bean>

    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/index"/>
            <mvc:mapping path="/base/**"/>
            <mvc:mapping path="/modules/**"/>
            <mvc:mapping path="/login/timeout/success"/>
            <bean class="com.etone.project.base.support.log.LogInterceptor">
                <property name="log4Database" ref="log4Database"/>
            </bean>
        </mvc:interceptor>
    </mvc:interceptors>

    <mvc:interceptors>
        <mvc:interceptor>
            <!--<mvc:mapping path="/index"/>-->
            <!--<mvc:mapping path="/base/**"/>-->
            <mvc:mapping path="/modules/**"/>
            <bean class="com.etone.project.base.support.log.LoggerInterceptor">
                <property name="logManager" ref="logManager"></property>
            </bean>
        </mvc:interceptor>
    </mvc:interceptors>

    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <!-- 将StringHttpMessageCOnverter的默认编码设为UTF-8 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8"/>
            </bean>
            <!-- JSON 自定义格式 -->
            <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
                <!--<property name="objectMapper" ref="customObjectMapper"/> -->
                <property name="objectMapper"> 
					<bean class="org.codehaus.jackson.map.ObjectMapper"> 
						<property name="dateFormat"> 
							<bean class="java.text.SimpleDateFormat"> 
							<constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss"></constructor-arg> 
							</bean> 
						</property> 
					</bean> 
				</property> 
				
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <!-- 上传定义 -->
    <!--<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">-->
    <!--&lt;!&ndash; 100000 btyes &ndash;&gt;-->
    <!--<property name="maxUploadSize" value="100000"/>-->
    <!--</bean>-->
    <!-- 定义JSP文件的位置 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- 容器默认的DefaultServletHandler处理 所有静态内容与无RequestMapping处理的URL-->
    <mvc:default-servlet-handler/>

    <!-- 定义无需Controller的url<->view直接映射 -->
    <mvc:view-controller path="/main" view-name="redirect:/log_list.html"/>
    <mvc:view-controller path="/" view-name="redirect:/login"/>

    <!-- 全局异常配置 start -->
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="org.apache.shiro.authz.UnauthorizedException">error/403</prop>
                <prop key="java.lang.Throwable">error/500</prop>
            </props>
        </property>
        <property name="statusCodes">
            <props>
                <prop key="500">500</prop>
                <prop key="404">404</prop>
                <prop key="403">403</prop>
            </props>
        </property>
        <!-- 设置日志输出级别，不定义则默认不输出警告等错误日志信息 -->
        <property name="warnLogCategory" value="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"/>
        <!-- 默认错误页面，当找不到上面mappings中指定的异常对应视图时，使用本默认配置 -->
        <property name="defaultErrorView" value="error/500"/>
        <!-- 默认HTTP状态码 ，返回错误默认设置的状态码-->
        <property name="defaultStatusCode" value="200"/>
    </bean>
    <!-- 全局异常配置 end -->

    <!-- 支持 Shiro对Controller的方法级AOP安全控制 begin-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true"/>
    </bean>

    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
    <!-- 支持 Shiro对Controller的方法级AOP安全控制 end  -->
</beans>
